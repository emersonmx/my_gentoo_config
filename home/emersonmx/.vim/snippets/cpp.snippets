# std::vector
snippet vector
	std::vector<${1:int}> ${2:vec};
# std::list
snippet list
	std::list<${1:int}> ${2:ls};
# std::map
snippet map
	std::map<${1:key}, ${2:value}> ${3:map};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
	${2}
	} /* namespace $1 */
snippet uns
	using namespace ${1};${2}
# Class
snippet cl
	class ${1:`Filename('$1', 'name')`} {
		public:
			$1(${2});

			virtual ~$1();

		private:
			${3:/* data */}
	};
# Class
snippet Cl
	class ${1:`Filename('$1', 'name')`} : public ${2:SuperClass} {
		public:
			$1(${3});

			virtual ~$1();

		private:
			${4:/* data */}
	};

# Get/Set function
snippet gsf
	inline ${1:int} ${2:variable}() const { return $2_; }

	inline void set_$2($1 $2) { $2_ = $2; }

	${3}
# Get/Set function for Objects
snippet Gsf
	inline ${1:int} ${2:variable}() const { return $2_; }

	inline void set_$2(const $1& $2) { $2_ = $2; }

	${3}
# Abstract function
snippet abfun
	virtual ${1:void} ${2:function}(${3}) = 0;${4}
# try
snippet try
	try {
		${1:/* code that throws exception */}
	} catch (${2:...}) {
		${3: /* handle the exception */}
	}
